# -*- coding: utf-8 -*-
"""vit_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l5fcrOUpz4FdvTXeyvoj_pHeePiI9JvP
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
import timm
import datetime

# Check if timm is correctly installed
print(f"timm version: {timm.__version__}")

# Define device (use GPU if available)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# 1. Data Preparation for ViT
transform_vit = transforms.Compose([
    transforms.Resize(224),  # ViT requires 224x224 input
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

batch_size = 64

trainset_vit = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_vit)
testset_vit = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_vit)

trainloader_vit = torch.utils.data.DataLoader(trainset_vit, batch_size=batch_size, shuffle=True, num_workers=2)
testloader_vit = torch.utils.data.DataLoader(testset_vit, batch_size=batch_size, shuffle=False, num_workers=2)

# Define class labels
classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

# 2. Define ViT Model
model_vit = timm.create_model("vit_base_patch16_224", pretrained=True, num_classes=10)
model_vit = model_vit.to(device)

# 3. Define Loss Function and Optimizer
criterion_vit = nn.CrossEntropyLoss()
optimizer_vit = torch.optim.AdamW(model_vit.parameters(), lr=3e-4, weight_decay=1e-2)

# 4. Training Function
def train(model, trainloader, criterion, optimizer, epochs=20):
    model.train()
    train_losses = []
    for epoch in range(epochs):
        running_loss = 0.0
        for inputs, labels in tqdm(trainloader, desc=f"Epoch {epoch+1}/{epochs}"):
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        epoch_loss = running_loss / len(trainloader)
        train_losses.append(epoch_loss)
        print(f"Epoch {epoch+1}, Loss: {epoch_loss:.4f}")

    return train_losses

# 5. Testing Function
def test(model, testloader):
    model.eval()
    correct, total = 0, 0
    with torch.no_grad():
        for inputs, labels in testloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print(f"Test Accuracy: {accuracy:.2f}%")
    return accuracy

# 6. Run Training and Testing
if __name__ == '__main__':
    epochs = 20  # Adjust as needed

    # Train ViT
    print("Starting ViT training...")
    train_losses_vit = train(model_vit, trainloader_vit, criterion_vit, optimizer_vit, epochs)

    # Test ViT
    test_accuracy_vit = test(model_vit, testloader_vit)

    # Save ViT model
    torch.save(model_vit.state_dict(), "vit_cifar10.pth")
    print("ViT model saved successfully!")

    # Save training log
    log_filename_vit = "training_log_vit.txt"

    with open(log_filename_vit, "a") as f:
        f.write(f"--- ViT Training Run ({datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}) ---\n")
        f.write(f"Model: Vision Transformer (ViT)\n")
        f.write(f"Epochs: {epochs}\n")
        f.write(f"Batch Size: {batch_size}\n")
        f.write(f"Learning Rate: {optimizer_vit.param_groups[0]['lr']}\n")
        f.write(f"Optimizer: {optimizer_vit.__class__.__name__}\n")
        f.write(f"Final Train Loss: {train_losses_vit[-1]:.4f}\n")
        f.write(f"Test Accuracy: {test_accuracy_vit:.2f}%\n")
        f.write("-" * 50 + "\n")

    print(f"Results saved to {log_filename_vit}")

    # Plot Training Loss Curve for ViT
    plt.plot(range(1, epochs+1), train_losses_vit, marker='o', linestyle='-')
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.title("ViT Training Loss Curve")
    plt.show()